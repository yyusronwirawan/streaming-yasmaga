import {
  require_react
} from "./chunk-ZLZLTJQL.js";
import {
  __toESM
} from "./chunk-2LSFTFF7.js";

// node_modules/react-audio-spectrum/es/index.js
var React = __toESM(require_react());
var import_react = __toESM(require_react());

// node_modules/react-audio-spectrum/es/utils.js
var getRandomId = function getRandomId2(len) {
  var str = "1234567890-qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM";
  var strLen = str.length;
  var res = "";
  for (var i = 0; i < len; i++) {
    var randomIndex = Math.floor(Math.random() * strLen);
    res += str[randomIndex];
  }
  return res;
};

// node_modules/react-audio-spectrum/es/index.js
var PLAY_STATUS = function(PLAY_STATUS2) {
  PLAY_STATUS2["PAUSED"] = "PAUSED";
  PLAY_STATUS2["PLAYING"] = "PLAYING";
  return PLAY_STATUS2;
}(PLAY_STATUS || {});
function ReactAudioSpectrum(props) {
  var _props$id = props.id, id = _props$id === void 0 ? getRandomId(50) : _props$id, audioId = props.audioId, audioEle = props.audioEle, _props$width = props.width, width = _props$width === void 0 ? 300 : _props$width, _props$height = props.height, height = _props$height === void 0 ? 200 : _props$height, _props$capColor = props.capColor, capColor = _props$capColor === void 0 ? "#FFF" : _props$capColor, _props$capHeight = props.capHeight, capHeight = _props$capHeight === void 0 ? 2 : _props$capHeight, _props$meterColor = props.meterColor, meterColor = _props$meterColor === void 0 ? [{
    stop: 0,
    color: "#f00"
  }, {
    stop: 0.5,
    color: "#0CD7FD"
  }, {
    stop: 1,
    color: "red"
  }] : _props$meterColor, _props$gap = props.gap, gap = _props$gap === void 0 ? 10 : _props$gap, _props$meterCount = props.meterCount, meterCount = _props$meterCount === void 0 ? 160 : _props$meterCount, _props$meterWidth = props.meterWidth, meterWidth = _props$meterWidth === void 0 ? 2 : _props$meterWidth, _props$silent = props.silent, silent = _props$silent === void 0 ? false : _props$silent;
  var _audioEleRef = (0, import_react.useRef)();
  var _audioCanvasRef = (0, import_react.useRef)();
  var _playStatusRef = (0, import_react.useRef)();
  var _audioContextRef = (0, import_react.useRef)();
  var _audioAnalyserRef = (0, import_react.useRef)();
  var _mediaEleSourceRef = (0, import_react.useRef)();
  var _animationIdRef = (0, import_react.useRef)();
  var prepareElements = function prepareElements2() {
    if (!audioId && !audioEle) {
      console.error("target audio not found!");
      return;
    } else if (audioId) {
      _audioEleRef.current = document.getElementById(audioId);
    } else {
      _audioEleRef.current = audioEle;
    }
    _audioCanvasRef.current = document.getElementById(id);
  };
  var handleBrowserVendors = function handleBrowserVendors2() {
    window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;
    window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;
    window.cancelAnimationFrame = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.msCancelAnimationFrame;
  };
  var createAndConnect = function createAndConnect2(audioEle2) {
    try {
      _audioContextRef.current = new window.AudioContext();
    } catch (e) {
      console.error("Your browser does not support AudioContext", e);
    }
    if (!_audioAnalyserRef.current) {
      _audioAnalyserRef.current = _audioContextRef.current.createAnalyser();
      _audioAnalyserRef.current.smoothingTimeConstant = 0.8;
      _audioAnalyserRef.current.fftSize = 2048;
    }
    if (!_mediaEleSourceRef.current) {
      _mediaEleSourceRef.current = _audioContextRef.current.createMediaElementSource(audioEle2);
      _mediaEleSourceRef.current.connect(_audioAnalyserRef.current);
      if (!silent) {
        _mediaEleSourceRef.current.connect(_audioContextRef.current.destination);
      }
    }
  };
  var drawSpectrum = function drawSpectrum2() {
    var cwidth = width;
    var cheight = height - capHeight;
    var capYPositionArray = [];
    var ctx = _audioCanvasRef.current.getContext("2d");
    var gradient = null;
    gradient = ctx.createLinearGradient(0, 0, 0, cheight);
    if (meterColor.constructor === Array) {
      var stops = meterColor;
      var len = stops.length;
      for (var i = 0; i < len; i++) {
        gradient.addColorStop(stops[i]["stop"], stops[i]["color"]);
      }
    } else if (typeof meterColor === "string") {
      gradient = meterColor;
    }
    var drawMeter = function drawMeter2() {
      var array = new Uint8Array(_audioAnalyserRef.current.frequencyBinCount);
      _audioAnalyserRef.current.getByteFrequencyData(array);
      if (_playStatusRef.current === PLAY_STATUS.PAUSED) {
        for (var _i = array.length - 1; _i >= 0; _i--) {
          array[_i] = 0;
        }
        var allCapsReachBottom = !capYPositionArray.some(function(cap) {
          return cap > 0;
        });
        if (allCapsReachBottom) {
          ctx.clearRect(0, 0, cwidth, cheight + capHeight);
          cancelAnimationFrame(_animationIdRef.current);
          return;
        }
      }
      var step = Math.round(array.length / meterCount);
      ctx.clearRect(0, 0, cwidth, cheight + capHeight);
      for (var _i2 = 0; _i2 < meterCount; _i2++) {
        var value = array[_i2 * step];
        if (capYPositionArray.length < Math.round(meterCount)) {
          capYPositionArray.push(value);
        }
        ;
        ctx.fillStyle = capColor;
        if (value < capYPositionArray[_i2]) {
          var preValue = --capYPositionArray[_i2];
          var _y = (256 - preValue) * cheight / 256;
          ctx.fillRect(_i2 * (meterWidth + gap), _y, meterWidth, capHeight);
        } else {
          var _y2 = (256 - value) * cheight / 256;
          ctx.fillRect(_i2 * (meterWidth + gap), _y2, meterWidth, capHeight);
          capYPositionArray[_i2] = value;
        }
        ;
        ctx.fillStyle = gradient;
        var y = (256 - value) * cheight / 256 + capHeight;
        ctx.fillRect(_i2 * (meterWidth + gap), y, meterWidth, cheight);
      }
      _animationIdRef.current = requestAnimationFrame(drawMeter2);
    };
    _animationIdRef.current = requestAnimationFrame(drawMeter);
  };
  var initAudioEvents = function initAudioEvents2() {
    if (_audioEleRef.current) {
      _audioEleRef.current.onpause = function(e) {
        _playStatusRef.current = PLAY_STATUS.PAUSED;
      };
      _audioEleRef.current.onplay = function(e) {
        _playStatusRef.current = PLAY_STATUS.PLAYING;
        createAndConnect(_audioEleRef.current);
        drawSpectrum();
      };
    }
  };
  (0, import_react.useEffect)(function() {
    prepareElements();
    handleBrowserVendors();
    initAudioEvents();
  }, []);
  return React.createElement("canvas", {
    id,
    width,
    height
  });
}
export {
  ReactAudioSpectrum as default
};
//# sourceMappingURL=react-audio-spectrum.js.map
