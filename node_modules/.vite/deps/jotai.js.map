{
  "version": 3,
  "sources": ["../../jotai/esm/vanilla.mjs", "../../jotai/esm/react.mjs"],
  "sourcesContent": ["let keyCount = 0;\nfunction atom(read, write) {\n  const key = `atom${++keyCount}`;\n  const config = {\n    toString() {\n      return (import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && this.debugLabel ? key + \":\" + this.debugLabel : key;\n    }\n  };\n  if (typeof read === \"function\") {\n    config.read = read;\n  } else {\n    config.init = read;\n    config.read = defaultRead;\n    config.write = defaultWrite;\n  }\n  if (write) {\n    config.write = write;\n  }\n  return config;\n}\nfunction defaultRead(get) {\n  return get(this);\n}\nfunction defaultWrite(get, set, arg) {\n  return set(\n    this,\n    typeof arg === \"function\" ? arg(get(this)) : arg\n  );\n}\n\nconst isSelfAtom = (atom, a) => atom.unstable_is ? atom.unstable_is(a) : a === atom;\nconst hasInitialValue = (atom) => \"init\" in atom;\nconst isActuallyWritableAtom = (atom) => !!atom.write;\nconst cancelablePromiseMap = /* @__PURE__ */ new WeakMap();\nconst isPendingPromise = (value) => {\n  var _a;\n  return isPromiseLike(value) && !((_a = cancelablePromiseMap.get(value)) == null ? void 0 : _a[1]);\n};\nconst cancelPromise = (promise, nextValue) => {\n  const promiseState = cancelablePromiseMap.get(promise);\n  if (promiseState) {\n    promiseState[1] = true;\n    promiseState[0].forEach((fn) => fn(nextValue));\n  } else if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    throw new Error(\"[Bug] cancelable promise not found\");\n  }\n};\nconst patchPromiseForCancelability = (promise) => {\n  if (cancelablePromiseMap.has(promise)) {\n    return;\n  }\n  const promiseState = [/* @__PURE__ */ new Set(), false];\n  cancelablePromiseMap.set(promise, promiseState);\n  const settle = () => {\n    promiseState[1] = true;\n  };\n  promise.then(settle, settle);\n  promise.onCancel = (fn) => {\n    promiseState[0].add(fn);\n  };\n};\nconst isPromiseLike = (x) => typeof (x == null ? void 0 : x.then) === \"function\";\nconst isAtomStateInitialized = (atomState) => \"v\" in atomState || \"e\" in atomState;\nconst returnAtomValue = (atomState) => {\n  if (\"e\" in atomState) {\n    throw atomState.e;\n  }\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && !(\"v\" in atomState)) {\n    throw new Error(\"[Bug] atom state is not initialized\");\n  }\n  return atomState.v;\n};\nconst addPendingPromiseToDependency = (atom, promise, dependencyAtomState) => {\n  if (!dependencyAtomState.p.has(atom)) {\n    dependencyAtomState.p.add(atom);\n    promise.then(\n      () => {\n        dependencyAtomState.p.delete(atom);\n      },\n      () => {\n        dependencyAtomState.p.delete(atom);\n      }\n    );\n  }\n};\nconst addDependency = (pending, atom, atomState, a, aState) => {\n  var _a;\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && a === atom) {\n    throw new Error(\"[Bug] atom cannot depend on itself\");\n  }\n  atomState.d.set(a, aState.n);\n  if (isPendingPromise(atomState.v)) {\n    addPendingPromiseToDependency(atom, atomState.v, aState);\n  }\n  (_a = aState.m) == null ? void 0 : _a.t.add(atom);\n  if (pending) {\n    addPendingDependent(pending, a, atom);\n  }\n};\nconst createPending = () => [/* @__PURE__ */ new Map(), /* @__PURE__ */ new Map(), /* @__PURE__ */ new Set()];\nconst addPendingAtom = (pending, atom, atomState) => {\n  if (!pending[0].has(atom)) {\n    pending[0].set(atom, /* @__PURE__ */ new Set());\n  }\n  pending[1].set(atom, atomState);\n};\nconst addPendingDependent = (pending, atom, dependent) => {\n  const dependents = pending[0].get(atom);\n  if (dependents) {\n    dependents.add(dependent);\n  }\n};\nconst getPendingDependents = (pending, atom) => pending[0].get(atom);\nconst addPendingFunction = (pending, fn) => {\n  pending[2].add(fn);\n};\nconst flushPending = (pending) => {\n  while (pending[1].size || pending[2].size) {\n    pending[0].clear();\n    const atomStates = new Set(pending[1].values());\n    pending[1].clear();\n    const functions = new Set(pending[2]);\n    pending[2].clear();\n    atomStates.forEach((atomState) => {\n      var _a;\n      return (_a = atomState.m) == null ? void 0 : _a.l.forEach((l) => l());\n    });\n    functions.forEach((fn) => fn());\n  }\n};\nconst buildStore = (getAtomState) => {\n  let debugMountedAtoms;\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    debugMountedAtoms = /* @__PURE__ */ new Set();\n  }\n  const setAtomStateValueOrPromise = (atom, atomState, valueOrPromise) => {\n    const hasPrevValue = \"v\" in atomState;\n    const prevValue = atomState.v;\n    const pendingPromise = isPendingPromise(atomState.v) ? atomState.v : null;\n    if (isPromiseLike(valueOrPromise)) {\n      patchPromiseForCancelability(valueOrPromise);\n      for (const a of atomState.d.keys()) {\n        addPendingPromiseToDependency(\n          atom,\n          valueOrPromise,\n          getAtomState(a, atomState)\n        );\n      }\n      atomState.v = valueOrPromise;\n      delete atomState.e;\n    } else {\n      atomState.v = valueOrPromise;\n      delete atomState.e;\n    }\n    if (!hasPrevValue || !Object.is(prevValue, atomState.v)) {\n      ++atomState.n;\n      if (pendingPromise) {\n        cancelPromise(pendingPromise, valueOrPromise);\n      }\n    }\n  };\n  const readAtomState = (pending, atom, atomState, dirtyAtoms) => {\n    var _a;\n    if (isAtomStateInitialized(atomState)) {\n      if (atomState.m && !(dirtyAtoms == null ? void 0 : dirtyAtoms.has(atom))) {\n        return atomState;\n      }\n      if (Array.from(atomState.d).every(\n        ([a, n]) => (\n          // Recursively, read the atom state of the dependency, and\n          // check if the atom epoch number is unchanged\n          readAtomState(pending, a, getAtomState(a, atomState), dirtyAtoms).n === n\n        )\n      )) {\n        return atomState;\n      }\n    }\n    atomState.d.clear();\n    let isSync = true;\n    const getter = (a) => {\n      if (isSelfAtom(atom, a)) {\n        const aState2 = getAtomState(a, atomState);\n        if (!isAtomStateInitialized(aState2)) {\n          if (hasInitialValue(a)) {\n            setAtomStateValueOrPromise(a, aState2, a.init);\n          } else {\n            throw new Error(\"no atom init\");\n          }\n        }\n        return returnAtomValue(aState2);\n      }\n      const aState = readAtomState(\n        pending,\n        a,\n        getAtomState(a, atomState),\n        dirtyAtoms\n      );\n      if (isSync) {\n        addDependency(pending, atom, atomState, a, aState);\n      } else {\n        const pending2 = createPending();\n        addDependency(pending2, atom, atomState, a, aState);\n        mountDependencies(pending2, atom, atomState);\n        flushPending(pending2);\n      }\n      return returnAtomValue(aState);\n    };\n    let controller;\n    let setSelf;\n    const options = {\n      get signal() {\n        if (!controller) {\n          controller = new AbortController();\n        }\n        return controller.signal;\n      },\n      get setSelf() {\n        if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && !isActuallyWritableAtom(atom)) {\n          console.warn(\"setSelf function cannot be used with read-only atom\");\n        }\n        if (!setSelf && isActuallyWritableAtom(atom)) {\n          setSelf = (...args) => {\n            if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && isSync) {\n              console.warn(\"setSelf function cannot be called in sync\");\n            }\n            if (!isSync) {\n              return writeAtom(atom, ...args);\n            }\n          };\n        }\n        return setSelf;\n      }\n    };\n    try {\n      const valueOrPromise = atom.read(getter, options);\n      setAtomStateValueOrPromise(atom, atomState, valueOrPromise);\n      if (isPromiseLike(valueOrPromise)) {\n        (_a = valueOrPromise.onCancel) == null ? void 0 : _a.call(valueOrPromise, () => controller == null ? void 0 : controller.abort());\n        const complete = () => {\n          if (atomState.m) {\n            const pending2 = createPending();\n            mountDependencies(pending2, atom, atomState);\n            flushPending(pending2);\n          }\n        };\n        valueOrPromise.then(complete, complete);\n      }\n      return atomState;\n    } catch (error) {\n      delete atomState.v;\n      atomState.e = error;\n      ++atomState.n;\n      return atomState;\n    } finally {\n      isSync = false;\n    }\n  };\n  const readAtom = (atom) => returnAtomValue(readAtomState(void 0, atom, getAtomState(atom)));\n  const getDependents = (pending, atom, atomState) => {\n    var _a, _b;\n    const dependents = /* @__PURE__ */ new Map();\n    for (const a of ((_a = atomState.m) == null ? void 0 : _a.t) || []) {\n      dependents.set(a, getAtomState(a, atomState));\n    }\n    for (const atomWithPendingPromise of atomState.p) {\n      dependents.set(\n        atomWithPendingPromise,\n        getAtomState(atomWithPendingPromise, atomState)\n      );\n    }\n    (_b = getPendingDependents(pending, atom)) == null ? void 0 : _b.forEach((dependent) => {\n      dependents.set(dependent, getAtomState(dependent, atomState));\n    });\n    return dependents;\n  };\n  const recomputeDependents = (pending, atom, atomState) => {\n    const topsortedAtoms = [];\n    const markedAtoms = /* @__PURE__ */ new Set();\n    const visit = (a, aState) => {\n      if (markedAtoms.has(a)) {\n        return;\n      }\n      markedAtoms.add(a);\n      for (const [d, s] of getDependents(pending, a, aState)) {\n        if (a !== d) {\n          visit(d, s);\n        }\n      }\n      topsortedAtoms.push([a, aState, aState.n]);\n    };\n    visit(atom, atomState);\n    const changedAtoms = /* @__PURE__ */ new Set([atom]);\n    for (let i = topsortedAtoms.length - 1; i >= 0; --i) {\n      const [a, aState, prevEpochNumber] = topsortedAtoms[i];\n      let hasChangedDeps = false;\n      for (const dep of aState.d.keys()) {\n        if (dep !== a && changedAtoms.has(dep)) {\n          hasChangedDeps = true;\n          break;\n        }\n      }\n      if (hasChangedDeps) {\n        readAtomState(pending, a, aState, markedAtoms);\n        mountDependencies(pending, a, aState);\n        if (prevEpochNumber !== aState.n) {\n          addPendingAtom(pending, a, aState);\n          changedAtoms.add(a);\n        }\n      }\n      markedAtoms.delete(a);\n    }\n  };\n  const writeAtomState = (pending, atom, atomState, ...args) => {\n    const getter = (a) => returnAtomValue(readAtomState(pending, a, getAtomState(a, atomState)));\n    const setter = (a, ...args2) => {\n      const aState = getAtomState(a, atomState);\n      let r;\n      if (isSelfAtom(atom, a)) {\n        if (!hasInitialValue(a)) {\n          throw new Error(\"atom not writable\");\n        }\n        const hasPrevValue = \"v\" in aState;\n        const prevValue = aState.v;\n        const v = args2[0];\n        setAtomStateValueOrPromise(a, aState, v);\n        mountDependencies(pending, a, aState);\n        if (!hasPrevValue || !Object.is(prevValue, aState.v)) {\n          addPendingAtom(pending, a, aState);\n          recomputeDependents(pending, a, aState);\n        }\n      } else {\n        r = writeAtomState(pending, a, aState, ...args2);\n      }\n      flushPending(pending);\n      return r;\n    };\n    const result = atom.write(getter, setter, ...args);\n    return result;\n  };\n  const writeAtom = (atom, ...args) => {\n    const pending = createPending();\n    const result = writeAtomState(pending, atom, getAtomState(atom), ...args);\n    flushPending(pending);\n    return result;\n  };\n  const mountDependencies = (pending, atom, atomState) => {\n    if (atomState.m && !isPendingPromise(atomState.v)) {\n      for (const a of atomState.d.keys()) {\n        if (!atomState.m.d.has(a)) {\n          const aMounted = mountAtom(pending, a, getAtomState(a, atomState));\n          aMounted.t.add(atom);\n          atomState.m.d.add(a);\n        }\n      }\n      for (const a of atomState.m.d || []) {\n        if (!atomState.d.has(a)) {\n          atomState.m.d.delete(a);\n          const aMounted = unmountAtom(pending, a, getAtomState(a, atomState));\n          aMounted == null ? void 0 : aMounted.t.delete(atom);\n        }\n      }\n    }\n  };\n  const mountAtom = (pending, atom, atomState) => {\n    if (!atomState.m) {\n      readAtomState(pending, atom, atomState);\n      for (const a of atomState.d.keys()) {\n        const aMounted = mountAtom(pending, a, getAtomState(a, atomState));\n        aMounted.t.add(atom);\n      }\n      atomState.m = {\n        l: /* @__PURE__ */ new Set(),\n        d: new Set(atomState.d.keys()),\n        t: /* @__PURE__ */ new Set()\n      };\n      if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n        debugMountedAtoms.add(atom);\n      }\n      if (isActuallyWritableAtom(atom) && atom.onMount) {\n        const mounted = atomState.m;\n        const { onMount } = atom;\n        addPendingFunction(pending, () => {\n          const onUnmount = onMount(\n            (...args) => writeAtomState(pending, atom, atomState, ...args)\n          );\n          if (onUnmount) {\n            mounted.u = onUnmount;\n          }\n        });\n      }\n    }\n    return atomState.m;\n  };\n  const unmountAtom = (pending, atom, atomState) => {\n    if (atomState.m && !atomState.m.l.size && !Array.from(atomState.m.t).some(\n      (a) => {\n        var _a;\n        return (_a = getAtomState(a, atomState).m) == null ? void 0 : _a.d.has(atom);\n      }\n    )) {\n      const onUnmount = atomState.m.u;\n      if (onUnmount) {\n        addPendingFunction(pending, onUnmount);\n      }\n      delete atomState.m;\n      if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n        debugMountedAtoms.delete(atom);\n      }\n      for (const a of atomState.d.keys()) {\n        const aMounted = unmountAtom(pending, a, getAtomState(a, atomState));\n        aMounted == null ? void 0 : aMounted.t.delete(atom);\n      }\n      return void 0;\n    }\n    return atomState.m;\n  };\n  const subscribeAtom = (atom, listener) => {\n    const pending = createPending();\n    const atomState = getAtomState(atom);\n    const mounted = mountAtom(pending, atom, atomState);\n    flushPending(pending);\n    const listeners = mounted.l;\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n      const pending2 = createPending();\n      unmountAtom(pending2, atom, atomState);\n      flushPending(pending2);\n    };\n  };\n  const unstable_derive = (fn) => buildStore(...fn(getAtomState));\n  const store = {\n    get: readAtom,\n    set: writeAtom,\n    sub: subscribeAtom,\n    unstable_derive\n  };\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    const devStore = {\n      // store dev methods (these are tentative and subject to change without notice)\n      dev4_get_internal_weak_map: () => ({\n        get: (atom) => {\n          const atomState = getAtomState(atom);\n          if (atomState.n === 0) {\n            return void 0;\n          }\n          return atomState;\n        }\n      }),\n      dev4_get_mounted_atoms: () => debugMountedAtoms,\n      dev4_restore_atoms: (values) => {\n        const pending = createPending();\n        for (const [atom, value] of values) {\n          if (hasInitialValue(atom)) {\n            const atomState = getAtomState(atom);\n            const hasPrevValue = \"v\" in atomState;\n            const prevValue = atomState.v;\n            setAtomStateValueOrPromise(atom, atomState, value);\n            mountDependencies(pending, atom, atomState);\n            if (!hasPrevValue || !Object.is(prevValue, atomState.v)) {\n              addPendingAtom(pending, atom, atomState);\n              recomputeDependents(pending, atom, atomState);\n            }\n          }\n        }\n        flushPending(pending);\n      }\n    };\n    Object.assign(store, devStore);\n  }\n  return store;\n};\nconst createStore = () => {\n  const atomStateMap = /* @__PURE__ */ new WeakMap();\n  const getAtomState = (atom) => {\n    let atomState = atomStateMap.get(atom);\n    if (!atomState) {\n      atomState = { d: /* @__PURE__ */ new Map(), p: /* @__PURE__ */ new Set(), n: 0 };\n      atomStateMap.set(atom, atomState);\n    }\n    return atomState;\n  };\n  return buildStore(getAtomState);\n};\nlet defaultStore;\nconst getDefaultStore = () => {\n  if (!defaultStore) {\n    defaultStore = createStore();\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n      globalThis.__JOTAI_DEFAULT_STORE__ || (globalThis.__JOTAI_DEFAULT_STORE__ = defaultStore);\n      if (globalThis.__JOTAI_DEFAULT_STORE__ !== defaultStore) {\n        console.warn(\n          \"Detected multiple Jotai instances. It may cause unexpected behavior with the default store. https://github.com/pmndrs/jotai/discussions/2044\"\n        );\n      }\n    }\n  }\n  return defaultStore;\n};\n\nexport { atom, createStore, getDefaultStore };\n", "'use client';\nimport ReactExports, { createContext, useContext, useRef, createElement, useReducer, useEffect, useDebugValue, useCallback } from 'react';\nimport { getDefaultStore, createStore } from 'jotai/vanilla';\n\nconst StoreContext = createContext(\n  void 0\n);\nconst useStore = (options) => {\n  const store = useContext(StoreContext);\n  return (options == null ? void 0 : options.store) || store || getDefaultStore();\n};\nconst Provider = ({\n  children,\n  store\n}) => {\n  const storeRef = useRef();\n  if (!store && !storeRef.current) {\n    storeRef.current = createStore();\n  }\n  return createElement(\n    StoreContext.Provider,\n    {\n      value: store || storeRef.current\n    },\n    children\n  );\n};\n\nconst isPromiseLike = (x) => typeof (x == null ? void 0 : x.then) === \"function\";\nconst attachPromiseMeta = (promise) => {\n  promise.status = \"pending\";\n  promise.then(\n    (v) => {\n      promise.status = \"fulfilled\";\n      promise.value = v;\n    },\n    (e) => {\n      promise.status = \"rejected\";\n      promise.reason = e;\n    }\n  );\n};\nconst use = ReactExports.use || ((promise) => {\n  if (promise.status === \"pending\") {\n    throw promise;\n  } else if (promise.status === \"fulfilled\") {\n    return promise.value;\n  } else if (promise.status === \"rejected\") {\n    throw promise.reason;\n  } else {\n    attachPromiseMeta(promise);\n    throw promise;\n  }\n});\nconst continuablePromiseMap = /* @__PURE__ */ new WeakMap();\nconst createContinuablePromise = (promise) => {\n  let continuablePromise = continuablePromiseMap.get(promise);\n  if (!continuablePromise) {\n    continuablePromise = new Promise((resolve, reject) => {\n      let curr = promise;\n      const onFulfilled = (me) => (v) => {\n        if (curr === me) {\n          resolve(v);\n        }\n      };\n      const onRejected = (me) => (e) => {\n        if (curr === me) {\n          reject(e);\n        }\n      };\n      const registerCancelHandler = (p) => {\n        if (\"onCancel\" in p && typeof p.onCancel === \"function\") {\n          p.onCancel((nextValue) => {\n            if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && nextValue === p) {\n              throw new Error(\"[Bug] p is not updated even after cancelation\");\n            }\n            if (isPromiseLike(nextValue)) {\n              continuablePromiseMap.set(nextValue, continuablePromise);\n              curr = nextValue;\n              nextValue.then(onFulfilled(nextValue), onRejected(nextValue));\n              registerCancelHandler(nextValue);\n            } else {\n              resolve(nextValue);\n            }\n          });\n        }\n      };\n      promise.then(onFulfilled(promise), onRejected(promise));\n      registerCancelHandler(promise);\n    });\n    continuablePromiseMap.set(promise, continuablePromise);\n  }\n  return continuablePromise;\n};\nfunction useAtomValue(atom, options) {\n  const store = useStore(options);\n  const [[valueFromReducer, storeFromReducer, atomFromReducer], rerender] = useReducer(\n    (prev) => {\n      const nextValue = store.get(atom);\n      if (Object.is(prev[0], nextValue) && prev[1] === store && prev[2] === atom) {\n        return prev;\n      }\n      return [nextValue, store, atom];\n    },\n    void 0,\n    () => [store.get(atom), store, atom]\n  );\n  let value = valueFromReducer;\n  if (storeFromReducer !== store || atomFromReducer !== atom) {\n    rerender();\n    value = store.get(atom);\n  }\n  const delay = options == null ? void 0 : options.delay;\n  useEffect(() => {\n    const unsub = store.sub(atom, () => {\n      if (typeof delay === \"number\") {\n        const value2 = store.get(atom);\n        if (isPromiseLike(value2)) {\n          attachPromiseMeta(createContinuablePromise(value2));\n        }\n        setTimeout(rerender, delay);\n        return;\n      }\n      rerender();\n    });\n    rerender();\n    return unsub;\n  }, [store, atom, delay]);\n  useDebugValue(value);\n  if (isPromiseLike(value)) {\n    const promise = createContinuablePromise(value);\n    return use(promise);\n  }\n  return value;\n}\n\nfunction useSetAtom(atom, options) {\n  const store = useStore(options);\n  const setAtom = useCallback(\n    (...args) => {\n      if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && !(\"write\" in atom)) {\n        throw new Error(\"not writable atom\");\n      }\n      return store.set(atom, ...args);\n    },\n    [store, atom]\n  );\n  return setAtom;\n}\n\nfunction useAtom(atom, options) {\n  return [\n    useAtomValue(atom, options),\n    // We do wrong type assertion here, which results in throwing an error.\n    useSetAtom(atom, options)\n  ];\n}\n\nexport { Provider, useAtom, useAtomValue, useSetAtom, useStore };\n"],
  "mappings": "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",
  "names": ["atom", "isPromiseLike", "ReactExports", "atom"]
}
